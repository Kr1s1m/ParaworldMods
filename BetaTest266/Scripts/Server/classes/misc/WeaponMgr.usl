
class CWeaponMgr
	
	var ^CFightingObj m_pxOwner;
	
	var array ^CWeaponDesc		m_apxAvailWeapons;
	var int						m_iCurRight;
	var int						m_iCurLeft;
	var int						m_iCurArmor;
	var int						m_iCurrentWeapon;
	var int						m_iSecShort, m_iSecMid;
			
	var bool					m_bAutoWeaponSel;
	
	var int						m_iWeaponVariation;
	var int						m_iLHVariation;
	
	constructor()
	endconstructor;
	
	export destructor()
		ClearAllWeapons();
	enddestructor;
	
	export constructor(^CFightingObj p_pxOwner)
		m_pxOwner = p_pxOwner;
		m_iCurRight = m_iCurLeft = m_iCurArmor = m_iCurrentWeapon = m_iSecShort = m_iSecMid = -1;
		m_bAutoWeaponSel = true;
	endconstructor;
			
	export proc int FindWeapon(string p_sTT)
		var int i, iC = m_apxAvailWeapons.NumEntries();
		for(i=0) cond(i<iC) iter(++i) do
			if(m_apxAvailWeapons[i]^.GetTTPath()==p_sTT)then
				return i;
			endif;
		endfor;	
		return -1;
	endproc;
	
	export proc void SetAutoWeaponChange(bool p_bO)
		m_bAutoWeaponSel = p_bO;
	endproc;
			
	export proc string GetCurrentWeapon()
		return GetWeaponPath(m_iCurrentWeapon);
	endproc;

	export proc string GetRightHandWeapon()
		return GetWeaponPath(m_iCurRight);
	endproc;
	
	export proc string GetLeftHandWeapon()
		return GetWeaponPath(m_iCurLeft);
	endproc;
	
	export proc string GetArmor()
		return GetWeaponPath(m_iCurArmor);
	endproc;
	
	export proc string GetSecondaryWeaponS()
		var string sPath = GetWeaponPath(m_iSecShort);
		//KLog.LogSpam("MaZi", "GetSecWeaponS: " + sPath);
		return sPath;
	endproc;

	export proc string GetSecondaryWeaponM()
		var string sPath = GetWeaponPath(m_iSecMid);
		//KLog.LogSpam("MaZi", "GetSecWeaponM: " + sPath);
		return sPath;
	endproc;
	
	proc string GetWeaponPath(int p_iIdx)
		var string sPath = "";
		if(IsValidWeaponIdx(p_iIdx))then
			sPath = m_apxAvailWeapons[p_iIdx]^.GetTTPath();
		endif;
		return sPath;
	endproc;
	
	export proc void ForceWeaponVariation( int p_iVar )
		m_iWeaponVariation = p_iVar;
	endproc;
	
	export proc void SelectNewWeaponVariation()
		if(m_pxOwner^.GetType()!="CHTR")then m_iWeaponVariation = 0; return; endif;
		var ^CWeaponDesc pxW = GetWeapon(m_iCurrentWeapon);
		if(pxW!=null)then
			if(pxW^.IsSpecialWeapon() || pxW^.GetTTPath().Find("/Special/")>=0)then
				m_iWeaponVariation = 0;
				return;
			endif;
			var int iM = pxW^.GetVariations();
			if(iM<2||iM>3)then
				m_iWeaponVariation = 0;
				return;
			endif;
//			var int iLvl = pxW^.GetNeededLevel();
//			var int iM = 1;
//			if(iLvl==1)then
//				iM = 3; 
//			elseif(iLvl==2)then
//				iM = 2;
//			else
//				m_iWeaponVariation = 0;
//				return;
//			endif;
			m_iWeaponVariation = Random.GetInt()%iM;
		endif;
	endproc;
	
	export proc void SelectNewLeftHVariation()
		if(m_pxOwner^.GetType()!="CHTR")then m_iLHVariation = 0; return; endif;
		var ^CWeaponDesc pxWD = GetWeapon(m_iCurArmor);
		if(pxWD!=null)then
			var int iLvl = pxWD^.GetNeededLevel();
			var int iM = 1;
			if(iLvl==1)then
				iM = 3; 
			elseif(iLvl==2)then
				iM = 2;
			else
				m_iLHVariation = 0;
				return;
			endif;
			m_iLHVariation = Random.GetInt()%iM;
		endif;
	endproc;
	
	export proc string GetRightHVariationPostfix()
		if(m_iWeaponVariation == 1)then
			return "_2";
		elseif(m_iWeaponVariation == 2)then
			return "_3";
		endif;
		return "";
	endproc;
	
	export proc string GetRightHVariationPostfix(string p_sCaller)
		if(m_iWeaponVariation == 1)then
			return "_2";
		elseif(m_iWeaponVariation == 2)then
			return "_3";
		endif;
		return "";
	endproc;
	
	export proc string GetLeftHVariationPostfix()
		if(m_iLHVariation == 1)then
			return "_2";
		elseif(m_iLHVariation == 2)then
			return "_3";
		endif;
		return "";
	endproc;
	
	export proc int AddWeapon(string p_sTT)
		if(!p_sTT.IsEmpty())then
			if(FindWeapon(p_sTT)<0)then
				var ^CWeaponDesc pxWeapon = new CWeaponDesc();
				if(pxWeapon^.Set(m_pxOwner, p_sTT))then
					return m_apxAvailWeapons.AddEntry(pxWeapon);
				endif;
			endif;
		endif;
		return -1;
	endproc;
	
	export proc void RemWeapon(string p_sTT)
		var int iIdx = FindWeapon(p_sTT);
		if(iIdx >= 0)then
			delete m_apxAvailWeapons[iIdx];
			m_apxAvailWeapons.DeleteEntry(iIdx);
		endif;
	endproc;
	
	export proc int NumWeapons()
		return m_apxAvailWeapons.NumEntries();
	endproc;
	
	export proc ^CWeaponDesc GetWeapon(int p_iIdx)
		if(IsValidWeaponIdx(p_iIdx))then
			return m_apxAvailWeapons[p_iIdx];
		endif;
		return null;
	endproc;

	export proc void UpdateStdWeapons()
		if(m_pxOwner==null)then return; endif;
		var array ^CWeaponDesc apxStdWeapons;
		if(GetStandardWeapons(apxStdWeapons))then
			var int i, iC = apxStdWeapons.NumEntries();
			for(i=0) cond(i<iC) iter(++i) do
				if(FindWeapon(apxStdWeapons[i]^.GetTTPath())<0)then
					m_apxAvailWeapons.AddEntry(apxStdWeapons[i]);
					apxStdWeapons.DeleteEntry(i--);
					iC = apxStdWeapons.NumEntries();
				endif;
			endfor;
			for(i=0) cond(i<iC) iter(++i) do
				delete apxStdWeapons[i];
			endfor;
		endif;
	endproc;
	
	export proc void ClearAllWeapons()
		var int i, iC = m_apxAvailWeapons.NumEntries();
		for(i=0) cond(i<iC) iter(++i) do
			delete m_apxAvailWeapons[i];
		endfor;
		m_apxAvailWeapons = 0;
	endproc;
	
	export proc void UpdateAll()
		ClearAllWeapons();
		UpdateStdWeapons();
		UpdateSpecialWeapons();
		UpdateSecondaryWeapons();
		GetBestWeapon(null);
		SelectNewWeaponVariation();
		SelectNewLeftHVariation();
	endproc;
	
	export proc void SetWeapons(string p_sRight, string p_sLeft, string p_sArmor)
		m_iCurRight = FindWeapon(p_sRight);
		m_iCurLeft  = FindWeapon(p_sLeft);
		m_iCurArmor = FindWeapon(p_sArmor);
		
		m_iCurrentWeapon = m_iCurRight;
	endproc;
	
	export proc string GetBestWeapon(^CFightingObj p_pxEnemy)
		return GetBestWeapon(p_pxEnemy, true);
	endproc;
	
	export proc string GetBestWeapon(^CFightingObj p_pxEnemy, bool p_bEvaluate)
		if(!m_bAutoWeaponSel)then return GetWeaponPath(m_iCurRight); endif;
		var int iIdx = -1;
		m_iCurRight = m_iCurLeft = m_iCurArmor = -1;
		if(p_bEvaluate)then
			var int i, iC = m_apxAvailWeapons.NumEntries();
			var real fHighest = -1.0f;
			var real fRH = -1.0f;
			var real fLH = -1.0f;
			var real fAH = -1.0f;
			// KLog.LogSpam("MaSc", "WeaponSelect ( " + iC.ToString() + " ): ");
			for(i=0)cond(i<iC)iter(++i)do
				var ^CWeaponDesc pxW = m_apxAvailWeapons[i];
				if(pxW^.GetNeededLevel()-1 > m_pxOwner^.GetLevel())then
					continue;
				endif;
				if(pxW^.IsSecondary())then continue; endif;
				var real fVal = -1.0f;
				if(p_pxEnemy!=null)then
					fVal = CWeaponEvaluator.Get().GetWeaponValue(m_pxOwner, pxW, p_pxEnemy);
				else
					fVal = CWeaponEvaluator.Get().GetWeaponValueNoBoni(pxW);
				endif;
				if(pxW^.IsRightHand() && fRH < fVal)then
					fRH = fVal;
					m_iCurRight = i;
				elseif(pxW^.IsLeftHand() && fLH < fVal)then
					fLH = fVal;
					m_iCurLeft = i;
				elseif(pxW^.IsArmor() && fAH < fVal)then
					fAH = fVal;
					m_iCurArmor = i;
				else
					// KLog.LogSpam("MaSc", "Misc Weapon" + pxW^.GetTTPath() + "\t\t" + fVal.ToString());
					// HACK test for titan
					// m_iCurRight = i;
				endif;
			endfor;
			// KLog.LogSpam("MaSc", "**************************************************");
			// KLog.LogSpam("MaSc", "RIGHT: " + GetWeaponTT(m_iCurRight));
			// KLog.LogSpam("MaSc", "LEFT:  " + GetWeaponTT(m_iCurLeft));
			// KLog.LogSpam("MaSc", "ARMOR: " + GetWeaponTT(m_iCurArmor));
			// KLog.LogSpam("MaSc", "**************************************************");
			iIdx = m_iCurrentWeapon = m_iCurRight;
		else
			iIdx = m_iCurrentWeapon;
		endif;
		return "";
	endproc;
	
	proc bool GetStandardWeapons(ref array ^CWeaponDesc po_rapxWeapons)
		var CTechTree xTT = m_pxOwner^.GetTechTree();
		var array string asWeaponPath;
		asWeaponPath = 2;
		asWeaponPath[0] = "/Objects/" + m_pxOwner^.GetPlayerTribeName() + "/Weapons";
		asWeaponPath[1] = "/Objects/" + m_pxOwner^.GetTribeName() + "/Weapons";
		var int iA = 0, iAC = 1;
		if(asWeaponPath[0]!=asWeaponPath[1])then iA=1; iAC=2; endif;
		for (iA=iA) cond(iA<iAC) iter(++iA) do
			var ^CTechTree.CNode pxNode = xTT.FindNode(asWeaponPath[iA]);
			if(pxNode==null)then return false; endif;
			var int i, iC = pxNode^.NumSubs();
			for(i=0) cond(i<iC) iter(++i) do
				var ^CTechTree.CNode pxWeapon = pxNode^.GetSub(i);
				if(pxWeapon == null)then continue; endif;
				//m_pxOwner^.Dump("A ->"+pxWeapon^.GetAbsPath());
				var ^CTechTree.CNode pxUsers = pxWeapon^.GetSub("Users");
				if(pxUsers==null)then continue; endif;
				//m_pxOwner^.Dump("B");
				if(pxUsers^.NumSubs()<=0)then continue; endif;
				//m_pxOwner^.Dump("C");
				if(pxUsers^.FindNodeRecursiveByValue(m_pxOwner^.GetClassName()) == null)then
					continue;
				endif;
				//m_pxOwner^.Dump("D");
				if(pxWeapon^.GetSubValue("level").ToInt()-1 > m_pxOwner^.GetLevel())then continue; endif;
				//m_pxOwner^.Dump("E -> ооооооооооооооооооооооооооооооооооооооооооооооооооооооооооо "+pxWeapon^.GetAbsPath());
				//if(iAC==2 && pxWeapon^.GetSubValue("secondary").ToInt()!=0)then continue; endif;
				po_rapxWeapons.AddEntry(new CWeaponDesc(m_pxOwner, pxWeapon^.GetAbsPath()));
			endfor;
		endfor;
		return true;
	endproc;
	
	proc real GetWeaponRange(int p_iIdx)
		if(p_iIdx < 0 || p_iIdx >= m_apxAvailWeapons.NumEntries())then return -999.0f; endif;
		return m_apxAvailWeapons[p_iIdx]^.GetMaxRange();
	endproc;
	
	proc bool IsValidWeaponIdx(int p_iIdx)
		return p_iIdx >= 0 && p_iIdx < m_apxAvailWeapons.NumEntries();
	endproc;
	
	export proc bool IsLongRangeWeapon(int p_iIdx)
		if(!IsValidWeaponIdx(p_iIdx))then return false; endif;
		//dont overwrite secondary ranges only if theres no secondary weapon
		return(!GetSecondaryWeaponS().IsEmpty() || !GetSecondaryWeaponM().IsEmpty());
		//return m_apxAvailWeapons[p_iIdx]^.GetMaxRange() > 2.0f;
	endproc;
	
	export proc bool IsSecondaryWeapon(int p_iIdx)
		if(!IsValidWeaponIdx(p_iIdx))then return false; endif;
		return m_apxAvailWeapons[p_iIdx]^.IsSecondary();
	endproc;
	
	proc bool IsSpecialWeapon(int p_iIdx)
		if(!IsValidWeaponIdx(p_iIdx))then return false; endif;
		return m_apxAvailWeapons[p_iIdx]^.IsSpecialWeapon();
	endproc;
	
	proc string GetWeaponTT(int p_iIdx)
		if(!IsValidWeaponIdx(p_iIdx))then return ""; endif;
		return m_apxAvailWeapons[p_iIdx]^.GetTTPath();
	endproc;

	proc void UpdateSecondaryWeapons()
		var real 	fBestShortVal = -1.0f;
		var int 	iBestShortIdx = -1;
		var real 	fBestMidVal 	= -1.0f;
		var int 	iBestMidIdx 	= -1;
		var array ^CWeaponDesc apxWeapons;
		var int i, iC = m_apxAvailWeapons.NumEntries();
		for(i=0) cond(i<iC) iter(++i) do
			var ^CWeaponDesc pxW = m_apxAvailWeapons[i];
			if(pxW==null)then continue; endif;
			if(pxW^.GetNeededLevel()-1 > m_pxOwner^.GetLevel())then continue; endif;
			if(!pxW^.IsSecondary())then continue; endif;
			var real fVal = CWeaponEvaluator.Get().GetWeaponValueNoBoni(pxW);
			if(pxW^.GetMaxRange() < 1.0f)then
				if(fVal > fBestShortVal)then
					fBestShortVal = fVal;
					iBestShortIdx = i;
				endif;
			else
				if(fVal > fBestMidVal)then
					fBestMidVal = fVal;
					iBestMidIdx = i;
				endif;
			endif;
		endfor;
		m_iSecShort = iBestShortIdx;
		m_iSecMid   = iBestMidIdx;
		var ^CWeaponDesc pxWp = GetWeapon(m_iSecShort);
		if(pxWp!=null)then
			m_pxOwner^.SetSecondaryRangeS(pxWp^.GetMaxRange());
		else
			m_pxOwner^.SetSecondaryRangeS(-1000.0f);
		endif;
		pxWp = GetWeapon(m_iSecMid);
		if(pxWp!=null)then
			m_pxOwner^.SetSecondaryRangeM(pxWp^.GetMaxRange());
		else
			m_pxOwner^.SetSecondaryRangeM(-1000.0f);
		endif;
	endproc;
	
	proc void UpdateSpecialWeapons()
		var ^CInventory pxInv = m_pxOwner^.GetInventory();
		if(pxInv!=null)then
			var int i, iC = pxInv^.Count();
			for(i=0) cond(i<iC) iter(++i) do
				var ^CWeaponItem pxWI = cast<CWeaponItem>(pxInv^.GetItem(i).GetObj());
				if(pxWI!=null)then
					var string sPath = pxWI^.GetWeaponPath();
					//KLog.LogSpam("MaZi", "plain Path = " + sPath);
					var array string asP;
					asP=4;
					asP[0] = sPath;
					asP[1] = sPath+"_l";
					asP[2] = sPath+"_m";
					asP[3] = sPath+"_s";
					var int iA, iAC = 4;
					for(iA=0) cond(iA<iAC) iter(++iA) do
						var int iIdx = FindWeapon(asP[iA]);
						if(iIdx < 0)then
							iIdx = AddWeapon(asP[iA]);
							if(iIdx < 0)then continue; endif;
							//KLog.LogSpam("MaZi", "Weapon " + asP[iA] + " found");
							m_apxAvailWeapons[iIdx]^.SetSpecialWeapon(pxWI);
						endif;
					endfor;
				endif;
			endfor;
		endif;
	endproc;
	
endclass;

class CWeaponDesc
	
	var string	m_sTTPath;
	
	var string	m_sNeededCaste;
	var int			m_iNeededLevel;
	var int			m_iVariations;
	
	var real		m_fDefense;
	var real		m_fRangedDefense;
	var real		m_fDamage;
	var real		m_fMinRange;
	var real		m_fMaxRange;
	var real		m_fFrequency;
	var real		m_fEndDmg;
	var real		m_fHitrange;
	var bool		m_bSecondary;
	var int			m_iSlot;
	var CBonus	m_xAttack, m_xDefense, m_xArmor;
	
	var ^CWeaponItem	m_pxSpecialWeapon;
	
	export constructor()
	endconstructor;
	
	export constructor(^CFightingObj p_pxOwner, string p_sTT)
		Set(p_pxOwner, p_sTT);
	endconstructor;
	
	export proc bool Set(^CFightingObj p_pxOwner, string p_sTT)
		if(p_pxOwner==null)then return false; endif;
		m_sTTPath = p_sTT;
		var CTechTree xTT = p_pxOwner^.GetTechTree();
		m_iNeededLevel 	= xTT.GetValueI(m_sTTPath+"/level", 0);
		m_iVariations 	= xTT.GetValueI(m_sTTPath+"/variations", 0);
		m_sNeededCaste 	= xTT.GetValueS(m_sTTPath+"/caste", "");
		m_fDefense		= xTT.GetValueR(m_sTTPath+"/defense", 0.0f);
		m_fRangedDefense = xTT.GetValueR(m_sTTPath+"/rangeddefense", 0.0f);
		m_fDamage		= xTT.GetValueR(m_sTTPath+"/damage", 0.0f);
		m_fMinRange		= xTT.GetValueR(m_sTTPath+"/minattackrange", 0.0f);
		m_fMaxRange		= xTT.GetValueR(m_sTTPath+"/range", 0.0f);
		m_fFrequency	= xTT.GetValueR(m_sTTPath+"/frequency", 0.0f);
		m_fEndDmg		= xTT.GetValueR(m_sTTPath+"/enddamage", 0.0f);
		m_fHitrange		= xTT.GetValueR(m_sTTPath+"/hitrange", 0.0f);
		m_bSecondary	= xTT.GetValueI(m_sTTPath+"/secondary", 0)==1;
		m_iSlot			= xTT.GetValueI(m_sTTPath+"/slot", 0);
		if(m_fDamage==0.0f && m_fDefense==0.0f && m_fRangedDefense==0.0 && m_iNeededLevel==0 && m_fMaxRange==0.0f)then return false; endif;
		p_pxOwner^.AddBoni(m_sTTPath+"/AttackBonus", m_xAttack);
		p_pxOwner^.AddBoni(m_sTTPath+"/DefenseBonus", m_xDefense);
		p_pxOwner^.AddBoni(m_sTTPath+"/RangedDefBonus", m_xArmor);
		return true;
	endproc;
	
	export proc real 		GetDefense() 		return m_fDefense; 				endproc;
	export proc real 		GetRangedDefense()	return m_fRangedDefense;		endproc;
	export proc real 		GetDamage() 		return m_fDamage; 				endproc;
	export proc real 		GetMinRange() 		return m_fMinRange; 			endproc;
	export proc real 		GetMaxRange() 		return m_fMaxRange; 			endproc;
	export proc real 		GetFrequency() 		return m_fFrequency; 			endproc;	
	export proc real 		GetEndDamage()		return m_fEndDmg; 				endproc;
	export proc real 		GetHitrange() 		return m_fHitrange; 			endproc;
	export proc string		GetTTPath()			return m_sTTPath;				endproc;
	export proc string		GetNeededCaste()	return m_sNeededCaste;			endproc;
	export proc int			GetNeededLevel()	return m_iNeededLevel;			endproc;
	export proc int			GetVariations()	return m_iVariations;			endproc;
	export proc bool		IsSecondary()		return m_bSecondary;			endproc;
	export proc ref CBonus	GetAttackBoni()		return m_xAttack;				endproc;
	export proc ref CBonus	GetDefenseBoni()	return m_xDefense;				endproc;
	export proc ref CBonus	GetArmorBoni()	return m_xArmor;				endproc;
	export proc int			GetSlot()			return m_iSlot;					endproc;
	
	export proc bool		IsValid()			return !m_sTTPath.IsEmpty();	endproc;
	export proc bool		IsSpecialWeapon()	return m_pxSpecialWeapon!=null; endproc;
	export proc bool		IsLeftHand()		return m_iSlot == 1;			endproc;
	export proc bool		IsRightHand()		return m_iSlot == 0;			endproc;
	export proc bool		IsArmor()			return m_iSlot == 2; 			endproc;
	
	export proc void SetSpecialWeapon(^CWeaponItem p_pxWeapon)
		m_pxSpecialWeapon = p_pxWeapon;
	endproc;
	
	export proc ^CWeaponItem GetSpecialWeapon()
		return m_pxSpecialWeapon;
	endproc;
	
	export proc bool op_Equal(ref CWeaponDesc p_rxRhs)
		return m_sTTPath == p_rxRhs.m_sTTPath;
	endproc;

endclass;

class CWeaponEvaluator
	
	static var ^CWeaponEvaluator ms_pxInst;
	
	class CCacheEntry
		export var string			m_sWeaponTT;
		export var string			m_sEnemyClass; // << EnemyClass is currently ignored
		export var CFourCC		m_xEnemyType;
		export var real				m_fValue;
	endclass;
	
	const int MAX_CACHE_SIZE = 20;
	var array CWeaponEvaluator.CCacheEntry		m_axCache;
	var int 									m_iCacheIter;
	
	export static proc ref CWeaponEvaluator Get()
		if(ms_pxInst==null)then
			ms_pxInst = new CWeaponEvaluator();
		endif;
		return ms_pxInst^;
	endproc;
	
	constructor()
			m_axCache = MAX_CACHE_SIZE;
			m_iCacheIter = 0;
	endconstructor;
	
	destructor()
	enddestructor;	
	
	proc void AddCacheEntry(^CWeaponDesc p_pxDesc, ^CFightingObj p_pxEnemy, real p_fVal)
		var ^CWeaponEvaluator.CCacheEntry pxCE = ^m_axCache[m_iCacheIter++];
		pxCE^.m_sWeaponTT = p_pxDesc^.GetTTPath();
		pxCE^.m_sEnemyClass = p_pxEnemy^.GetClassName();
		pxCE^.m_xEnemyType = p_pxEnemy^.GetType();
		pxCE^.m_fValue = p_fVal;
		if(m_iCacheIter==MAX_CACHE_SIZE)then m_iCacheIter = 0; endif;
	endproc;
	
	proc real SearchCache(^CWeaponDesc p_pxDesc, ^CFightingObj p_pxEnemy)
		var int i, iC = m_axCache.NumEntries();
		for (i=0) cond(i<iC) iter(++i) do
			var ^CWeaponEvaluator.CCacheEntry pxCE = ^m_axCache[i];
			if(pxCE^.m_sWeaponTT == p_pxDesc^.GetTTPath())then
				if(pxCE^.m_xEnemyType == p_pxEnemy^.GetType())then
					return pxCE^.m_fValue;
				endif;
			endif;
		endfor;
		return -1.0f;
	endproc;
	
	export proc real GetWeaponValue(^CFightingObj p_pxAttacker, ^CWeaponDesc p_pxWeapon, ^CFightingObj p_pxEnemy)
		var real fCached = SearchCache(p_pxWeapon, p_pxEnemy);
		if(fCached > 0.0f)then
			//KLog.LogSpam("MaZi", "--> Value : " + fCached.ToString() + " (cache)");
			return fCached;
		endif;
		if(p_pxAttacker==null || p_pxWeapon==null || p_pxEnemy == null)then
			return -1.0f;
		endif;
		var real fAttackMod = 1.0f + (p_pxWeapon^.GetAttackBoni().GetBonus( p_pxEnemy^.GetType().AsString(), p_pxEnemy^.GetClassName()) / 100.0);
		var real fDefenseMod = 1.0f + (p_pxWeapon^.GetDefenseBoni().GetBonus(p_pxEnemy^.GetType().AsString(), p_pxEnemy^.GetClassName()) / 100.0);
		var real fArmorMod = 1.0f + (p_pxWeapon^.GetArmorBoni().GetBonus(p_pxEnemy^.GetType().AsString(), p_pxEnemy^.GetClassName()) / 100.0);
		var real fDmg = p_pxWeapon^.GetDamage() * fAttackMod;
		var real fDef = p_pxWeapon^.GetDefense() * fDefenseMod;
		var real fArmor = p_pxWeapon^.GetRangedDefense() *fArmorMod;
		var real fValMod = (1.0f + (p_pxWeapon^.GetMaxRange() - p_pxWeapon^.GetMinRange()) * 0.1f);
		fValMod *= 60.0f / Math.Max(p_pxWeapon^.GetFrequency(), 1.0f);
		fValMod *= 1.0f + (p_pxWeapon^.GetHitrange() + p_pxWeapon^.GetEndDamage()) * 0.01f;
		var real fValue = (fDmg + fDef + fArmor) * fValMod;
		//KLog.LogSpam("MaZi", "Value : " + fValue.ToString());
		AddCacheEntry(p_pxWeapon, p_pxEnemy, fValue);
		return fValue;
	endproc;
	
	export proc real GetWeaponValueNoRange(^CWeaponDesc p_pxWeapon)
		var real fDmg = p_pxWeapon^.GetDamage();
		var real fDef = p_pxWeapon^.GetDefense();
		var real fRangedDef = p_pxWeapon^.GetRangedDefense();
		var real fValMod = 60.0f / Math.Max(p_pxWeapon^.GetFrequency(), 1.0f);
		fValMod *= 1.0f + (p_pxWeapon^.GetHitrange() + p_pxWeapon^.GetEndDamage()) * 0.1f;
		return (fDmg + fDef + fRangedDef) * fValMod;
	endproc;
	
	export proc real GetWeaponValueNoBoni(^CWeaponDesc p_pxWeapon)
		var real fDmg = p_pxWeapon^.GetDamage();
		var real fDef = p_pxWeapon^.GetDefense();
		var real fRangedDef = p_pxWeapon^.GetRangedDefense();
		var real fValMod = (1.0f + (p_pxWeapon^.GetMaxRange() - p_pxWeapon^.GetMinRange()) * 0.1f);
		fValMod *= 60.0f / Math.Max(p_pxWeapon^.GetFrequency(), 60.0f);
		fValMod *= 1.0f + (p_pxWeapon^.GetHitrange() + p_pxWeapon^.GetEndDamage()) * 0.1f;
		return (fDmg + fDef + fRangedDef) * fValMod;
	endproc;
	
endclass;
